
Unixoid test
  1. should have a my/private/files directory (FAILED - 1)
  2. should have a my/public/files directory (FAILED - 2)
  3. should have a my/private/files/t-vars.env file (FAILED - 3)
  4. should have 'List of env vars that begin with T' on first line of t-vars.env (FAILED - 4)
  5. should have the list of env vars that begin with T in t-vars.env (FAILED - 5)
  6. should have the TESTING_MAKERS env variable set up (FAILED - 6)
  7. should have the TESTING_MAKERS env set to be created for new terminal windows (FAILED - 7)
  8a. should have t-vars.count in my/public/files (FAILED - 8)
  8b. should have the count of env vars in my/public/files/t-vars.count (FAILED - 9)
  9. should have rw access for the owner only on my/private/files/t-vars.env (FAILED - 10)
  10. should only allow the owner to change into my/private/files (FAILED - 11)
  11. should have rw permissions for all users on my/public/files/t-vars.count (FAILED - 12)
  12a. should have text-files-count.txt in my/public/files (FAILED - 13)
  12b. should have the count of text files in my/public/files/text-files-count.txt (FAILED - 14)
  13a. should have first-three-env.txt in my/private/files (FAILED - 15)
  13b. should have the the first three env vars in my/private/files/first-three-env.txt (FAILED - 16)
  14. should have commands.txt in my/private/files (FAILED - 17)

Failures:

  1) Unixoid test 1. should have a my/private/files directory
     Failure/Error: expect(File.exist?('my/private/files')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:4:in `block (2 levels) in <top (required)>'

  2) Unixoid test 2. should have a my/public/files directory
     Failure/Error: expect(File.exist?('my/public/files')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:8:in `block (2 levels) in <top (required)>'

  3) Unixoid test 3. should have a my/private/files/t-vars.env file
     Failure/Error: expect(File.exist?('my/private/files/t-vars.env')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:12:in `block (2 levels) in <top (required)>'

  4) Unixoid test 4. should have 'List of env vars that begin with T' on first line of t-vars.env
     Failure/Error: lines = File.readlines('my/private/files/t-vars.env')
     Errno::ENOENT:
       No such file or directory @ rb_sysopen - my/private/files/t-vars.env
     # ./challenge_spec.rb:16:in `readlines'
     # ./challenge_spec.rb:16:in `block (2 levels) in <top (required)>'

  5) Unixoid test 5. should have the list of env vars that begin with T in t-vars.env
     Failure/Error: lines = File.readlines('my/private/files/t-vars.env')
     Errno::ENOENT:
       No such file or directory @ rb_sysopen - my/private/files/t-vars.env
     # ./challenge_spec.rb:21:in `readlines'
     # ./challenge_spec.rb:21:in `block (2 levels) in <top (required)>'

  6) Unixoid test 6. should have the TESTING_MAKERS env variable set up
     Failure/Error: expect(ENV["TESTING_MAKERS"]).to eq('working')
       
       expected: "working"
            got: nil
       
       (compared using ==)
     # ./challenge_spec.rb:28:in `block (2 levels) in <top (required)>'

  7) Unixoid test 7. should have the TESTING_MAKERS env set to be created for new terminal windows
     Failure/Error: expect(File.read("#{Dir.home}/.bash_profile")).to match(/export\s+TESTING_MAKERS=working/)
       expected "#bashrc for nvm stuff\nsource ~/.bashrc\n\n#PAAAAAATH\nalias PATH='/usr/local/bin:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481/bin:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481@global/bin:/Users/NoxAir/.rvm/rubies/ruby-2.0.0-p481/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Users/NoxAir/.rvm/bin'\n\n#github aliases\nalias ga='git add '\nalias gb='git branch '\nalias gc='git commit -m'\nalias gd='git diff'\nalias gh='git hist'\nalias gk='gitk --all&'\nalias go='git checkout '\nalias gp='git push'\nalias gs='git status '\nalias gx='gitx --allexport'\n\n#rackup aliases\nalias ru='rackup '\n\n#sublime aliases\nalias subl='sublime '\n\nalias rvm-restart='rvm_reload_flag=1 source '\\''/Users/NoxAir/.rvm/scripts/rvm'\\'''\n\n#mongo alias\nalias mongod='mongod --dbpath ~/data/db'\n\n#set vim as default\nexport GIT_EDITOR=vim\nexport VISUAL=vim\nexport EDITOR=vim\nset -o vi\n\n#cd options\nalias cd..='cd ../'                         # Go back 1 directory level (for fast typers)\nalias ..='cd ../'                           # Go back 1 directory level\nalias ...='cd ../../'                       # Go back 2 directory levels\nalias .3='cd ../../../'                     # Go back 3 directory levels\nalias .4='cd ../../../../'                  # Go back 4 directory levels\nalias .5='cd ../../../../../'               # Go back 5 directory levels\nalias .6='cd ../../../../../../'            # Go back 6 directory levels\n\n#various paths\nexport PATH=/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481/bin:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481@global/bin:/Users/NoxAir/.rvm/rubies/ruby-2.0.0-p481/bin:/usr/bin:/bin:/usr/sbin:/sbin:usr/local/bin:/Users/NoxAir/.rvm/bin\nexport GEM_PATH=/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481@global\nexport GEM_HOME=/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481\nexport NODE_PATH=/usr/local/bin/node:/usr/local/share/npm/lib/node_modules:/usr/local/lib/node_modules\n\n#iTerm color\nexport TERM=xterm-256color\nexport CLICOLOR=1\n\n#git prompt\nred='\\e[0;31m'\nRED='\\e[1;31m'\ngreen='\\e[0;32m'\nGREEN='\\e[1;32m'\nyellow='\\e[0;33m'\nYELLOW='\\e[1;33m'\nblue='\\e[0;34m'\nBLUE='\\e[1;34m'\nmagenta='\\e[0;35m'\nMAGENTA='\\e[1;35m'\ncyan='\\e[0;36m'\nCYAN='\\e[1;36m'\nNC='\\e[0m'              # No Color\n \nfunction _git_prompt() {\n  local git_status=\"`git status -unormal 2>&1`\"\n  if ! [[ \"$git_status\" =~ Not\\ a\\ git\\ repo ]]; then\n    if [[ \"$git_status\" =~ nothing\\ to\\ commit ]]; then\n      local ansi=$GREEN\n    elif [[ \"$git_status\" =~ nothing\\ added\\ to\\ commit\\ but\\ untracked\\ files\\ present ]]; then\n      local ansi=$RED\n    else\n      local ansi=$YELLOW\n    fi\n    if [[ \"$git_status\" =~ On\\ branch\\ ([^[:space:]]+) ]]; then\n      branch=${BASH_REMATCH[1]}\n      #test \"$branch\" != master || branch=' '\n    else\n      # Detached HEAD.  (branch=HEAD is a faster alternative.)\n      branch=\"(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||\n      echo HEAD`)\"\n    fi\n    echo -n '[\\['\"$ansi\"'\\]'\"$branch\"'\\[\\e[0m\\]]'\n  fi\n}\n \nfunction report_status() {\n  RET_CODE=$?\n  if [[ $RET_CODE -ne 0 ]] ; then\n    echo -ne \"[\\[$RED\\]$RET_CODE\\[$NC\\]]\"\n  fi\n}\n\n#export PS1=\\[\\e[0m\\]\\[\\033[00;32m\\][\\u \\W]\\[\\033[00m\\]$\nexport _PS1=\"\\[$NC\\][$GREEN\\u \\W]$NC\"\nexport PS2=\"\\[$NC\\]> \"\n#export PS2=\\[\\e[0m\\]>\nexport PROMPT_COMMAND='_status=$(report_status);export PS1=\"$(_git_prompt)${_status}${_PS1}\\$ \";unset _status;'\n\n#navigation shortcuts\nexport WKR=/Users/NoxAir/Development/makers-academy/final-project/final-project-prototyping\nexport MKR=~/Development/makers-academy\n\n#test ENV vars\nexport FB_DB=test\n#eval \"$(rbenv init -)\"\n\n#making brew happy - makes everything else unhappy\nexport PATH=/usr/local/bin:$PATH\n\n#get rvm to stop complaining\nsource ~/.rvm/scripts/rvm\n\n#Cairo install\nexport PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig\n\n#homebrew php fix\nexport PATH=\"$(brew --prefix homebrew/php/php56)/bin:$PATH\"\n\n#use latest node\nnvm use 0.10.33\n\n#weird node build errors\nexport LDFLAGS=-Wl,-export_dynamic\n\n#autojump\n[[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh\n" to match /export\s+TESTING_MAKERS=working/
       Diff:
       @@ -1,2 +1,133 @@
       -/export\s+TESTING_MAKERS=working/
       +#bashrc for nvm stuff
       +source ~/.bashrc
       +
       +#PAAAAAATH
       +alias PATH='/usr/local/bin:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481/bin:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481@global/bin:/Users/NoxAir/.rvm/rubies/ruby-2.0.0-p481/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Users/NoxAir/.rvm/bin'
       +
       +#github aliases
       +alias ga='git add '
       +alias gb='git branch '
       +alias gc='git commit -m'
       +alias gd='git diff'
       +alias gh='git hist'
       +alias gk='gitk --all&'
       +alias go='git checkout '
       +alias gp='git push'
       +alias gs='git status '
       +alias gx='gitx --allexport'
       +
       +#rackup aliases
       +alias ru='rackup '
       +
       +#sublime aliases
       +alias subl='sublime '
       +
       +alias rvm-restart='rvm_reload_flag=1 source '\''/Users/NoxAir/.rvm/scripts/rvm'\'''
       +
       +#mongo alias
       +alias mongod='mongod --dbpath ~/data/db'
       +
       +#set vim as default
       +export GIT_EDITOR=vim
       +export VISUAL=vim
       +export EDITOR=vim
       +set -o vi
       +
       +#cd options
       +alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
       +alias ..='cd ../'                           # Go back 1 directory level
       +alias ...='cd ../../'                       # Go back 2 directory levels
       +alias .3='cd ../../../'                     # Go back 3 directory levels
       +alias .4='cd ../../../../'                  # Go back 4 directory levels
       +alias .5='cd ../../../../../'               # Go back 5 directory levels
       +alias .6='cd ../../../../../../'            # Go back 6 directory levels
       +
       +#various paths
       +export PATH=/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481/bin:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481@global/bin:/Users/NoxAir/.rvm/rubies/ruby-2.0.0-p481/bin:/usr/bin:/bin:/usr/sbin:/sbin:usr/local/bin:/Users/NoxAir/.rvm/bin
       +export GEM_PATH=/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481:/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481@global
       +export GEM_HOME=/Users/NoxAir/.rvm/gems/ruby-2.0.0-p481
       +export NODE_PATH=/usr/local/bin/node:/usr/local/share/npm/lib/node_modules:/usr/local/lib/node_modules
       +
       +#iTerm color
       +export TERM=xterm-256color
       +export CLICOLOR=1
       +
       +#git prompt
       +red='\e[0;31m'
       +RED='\e[1;31m'
       +green='\e[0;32m'
       +GREEN='\e[1;32m'
       +yellow='\e[0;33m'
       +YELLOW='\e[1;33m'
       +blue='\e[0;34m'
       +BLUE='\e[1;34m'
       +magenta='\e[0;35m'
       +MAGENTA='\e[1;35m'
       +cyan='\e[0;36m'
       +CYAN='\e[1;36m'
       +NC='\e[0m'              # No Color
       + 
       +function _git_prompt() {
       +  local git_status="`git status -unormal 2>&1`"
       +  if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
       +    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
       +      local ansi=$GREEN
       +    elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
       +      local ansi=$RED
       +    else
       +      local ansi=$YELLOW
       +    fi
       +    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
       +      branch=${BASH_REMATCH[1]}
       +      #test "$branch" != master || branch=' '
       +    else
       +      # Detached HEAD.  (branch=HEAD is a faster alternative.)
       +      branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
       +      echo HEAD`)"
       +    fi
       +    echo -n '[\['"$ansi"'\]'"$branch"'\[\e[0m\]]'
       +  fi
       +}
       + 
       +function report_status() {
       +  RET_CODE=$?
       +  if [[ $RET_CODE -ne 0 ]] ; then
       +    echo -ne "[\[$RED\]$RET_CODE\[$NC\]]"
       +  fi
       +}
       +
       +#export PS1=\[\e[0m\]\[\033[00;32m\][\u \W]\[\033[00m\]$
       +export _PS1="\[$NC\][$GREEN\u \W]$NC"
       +export PS2="\[$NC\]> "
       +#export PS2=\[\e[0m\]>
       +export PROMPT_COMMAND='_status=$(report_status);export PS1="$(_git_prompt)${_status}${_PS1}\$ ";unset _status;'
       +
       +#navigation shortcuts
       +export WKR=/Users/NoxAir/Development/makers-academy/final-project/final-project-prototyping
       +export MKR=~/Development/makers-academy
       +
       +#test ENV vars
       +export FB_DB=test
       +#eval "$(rbenv init -)"
       +
       +#making brew happy - makes everything else unhappy
       +export PATH=/usr/local/bin:$PATH
       +
       +#get rvm to stop complaining
       +source ~/.rvm/scripts/rvm
       +
       +#Cairo install
       +export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig
       +
       +#homebrew php fix
       +export PATH="$(brew --prefix homebrew/php/php56)/bin:$PATH"
       +
       +#use latest node
       +nvm use 0.10.33
       +
       +#weird node build errors
       +export LDFLAGS=-Wl,-export_dynamic
       +
       +#autojump
       +[[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh
     # ./challenge_spec.rb:32:in `block (2 levels) in <top (required)>'

  8) Unixoid test 8a. should have t-vars.count in my/public/files
     Failure/Error: expect(File.exist?('my/public/files/t-vars.count')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:36:in `block (2 levels) in <top (required)>'

  9) Unixoid test 8b. should have the count of env vars in my/public/files/t-vars.count
     Failure/Error: expect(File.read('my/public/files/t-vars.count')).to match(/^Overall count:\s+\d+\s*$/i)
     Errno::ENOENT:
       No such file or directory @ rb_sysopen - my/public/files/t-vars.count
     # ./challenge_spec.rb:41:in `read'
     # ./challenge_spec.rb:41:in `block (2 levels) in <top (required)>'

  10) Unixoid test 9. should have rw access for the owner only on my/private/files/t-vars.env
     Failure/Error: permissions = File.stat(file).mode
     Errno::ENOENT:
       No such file or directory @ rb_file_s_stat - my/private/files/t-vars.env
     # ./challenge_spec.rb:46:in `stat'
     # ./challenge_spec.rb:46:in `block (2 levels) in <top (required)>'

  11) Unixoid test 10. should only allow the owner to change into my/private/files
     Failure/Error: permissions = File.stat(folder).mode
     Errno::ENOENT:
       No such file or directory @ rb_file_s_stat - my/private/files
     # ./challenge_spec.rb:52:in `stat'
     # ./challenge_spec.rb:52:in `block (2 levels) in <top (required)>'

  12) Unixoid test 11. should have rw permissions for all users on my/public/files/t-vars.count
     Failure/Error: t_vars_permissions = File.stat('my/public/files/t-vars.count').mode
     Errno::ENOENT:
       No such file or directory @ rb_file_s_stat - my/public/files/t-vars.count
     # ./challenge_spec.rb:59:in `stat'
     # ./challenge_spec.rb:59:in `block (2 levels) in <top (required)>'

  13) Unixoid test 12a. should have text-files-count.txt in my/public/files
     Failure/Error: expect(File.exist?('my/public/files/text-files-count.txt')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:64:in `block (2 levels) in <top (required)>'

  14) Unixoid test 12b. should have the count of text files in my/public/files/text-files-count.txt
     Failure/Error: expect(File.read('my/public/files/text-files-count.txt')).to match(/^\s*\d{2,6}\s*$/)
     Errno::ENOENT:
       No such file or directory @ rb_sysopen - my/public/files/text-files-count.txt
     # ./challenge_spec.rb:68:in `read'
     # ./challenge_spec.rb:68:in `block (2 levels) in <top (required)>'

  15) Unixoid test 13a. should have first-three-env.txt in my/private/files
     Failure/Error: expect(File.exist?('my/private/files/first-three-env.txt')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:72:in `block (2 levels) in <top (required)>'

  16) Unixoid test 13b. should have the the first three env vars in my/private/files/first-three-env.txt
     Failure/Error: lines = File.readlines('my/private/files/first-three-env.txt')
     Errno::ENOENT:
       No such file or directory @ rb_sysopen - my/private/files/first-three-env.txt
     # ./challenge_spec.rb:76:in `readlines'
     # ./challenge_spec.rb:76:in `block (2 levels) in <top (required)>'

  17) Unixoid test 14. should have commands.txt in my/private/files
     Failure/Error: expect(File.exist?('my/private/files/commands.txt')).to be true
       
       expected true
            got false
     # ./challenge_spec.rb:82:in `block (2 levels) in <top (required)>'

Finished in 0.0055 seconds (files took 0.10157 seconds to load)
17 examples, 17 failures

Failed examples:

rspec ./challenge_spec.rb:3 # Unixoid test 1. should have a my/private/files directory
rspec ./challenge_spec.rb:7 # Unixoid test 2. should have a my/public/files directory
rspec ./challenge_spec.rb:11 # Unixoid test 3. should have a my/private/files/t-vars.env file
rspec ./challenge_spec.rb:15 # Unixoid test 4. should have 'List of env vars that begin with T' on first line of t-vars.env
rspec ./challenge_spec.rb:20 # Unixoid test 5. should have the list of env vars that begin with T in t-vars.env
rspec ./challenge_spec.rb:27 # Unixoid test 6. should have the TESTING_MAKERS env variable set up
rspec ./challenge_spec.rb:31 # Unixoid test 7. should have the TESTING_MAKERS env set to be created for new terminal windows
rspec ./challenge_spec.rb:35 # Unixoid test 8a. should have t-vars.count in my/public/files
rspec ./challenge_spec.rb:40 # Unixoid test 8b. should have the count of env vars in my/public/files/t-vars.count
rspec ./challenge_spec.rb:44 # Unixoid test 9. should have rw access for the owner only on my/private/files/t-vars.env
rspec ./challenge_spec.rb:50 # Unixoid test 10. should only allow the owner to change into my/private/files
rspec ./challenge_spec.rb:58 # Unixoid test 11. should have rw permissions for all users on my/public/files/t-vars.count
rspec ./challenge_spec.rb:63 # Unixoid test 12a. should have text-files-count.txt in my/public/files
rspec ./challenge_spec.rb:67 # Unixoid test 12b. should have the count of text files in my/public/files/text-files-count.txt
rspec ./challenge_spec.rb:71 # Unixoid test 13a. should have first-three-env.txt in my/private/files
rspec ./challenge_spec.rb:75 # Unixoid test 13b. should have the the first three env vars in my/private/files/first-three-env.txt
rspec ./challenge_spec.rb:81 # Unixoid test 14. should have commands.txt in my/private/files
